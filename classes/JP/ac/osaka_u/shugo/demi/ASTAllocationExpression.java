/* Generated By:JJTree: Do not edit this line. ASTAllocationExpression.java */

package JP.ac.osaka_u.shugo.demi;

import java.util.*;
import java.lang.reflect.*;

public class ASTAllocationExpression extends SimpleNode {
    public ASTAllocationExpression(int id) {
	super(id);
    }

    public ASTAllocationExpression(Parser p, int id) {
	super(p, id);
    }

    protected Object evaluate0(Demi demi) throws Throwable {
	Object cls = ((SimpleNode) jjtGetChild(0)).evaluate(demi);
	if (cls == null || !(cls instanceof Class))
	    throw new IllegalTypeException(cls, "Class");
	if (jjtGetChild(1) instanceof ASTArgumentList) {
	    Object[] args =
		((ASTArgumentList) jjtGetChild(1)).getArguments(demi);
	    Constructor[] constructors = ((Class) cls).getConstructors();
	outer:
	    for (int i = 0; i < constructors.length; i++) {
		Class[] paramtypes = constructors[i].getParameterTypes();
		if (args.length != paramtypes.length)
		    continue;
		for (int j = 0; j < args.length; j++) {
		    if (!Demi.canConvert(args[j], paramtypes[j]))
			continue outer;
		}
		for (int j = 0; j < args.length; j++) {
		    args[j] = Demi.convert(args[j], paramtypes[j]);
		}
		return constructors[i].newInstance(args);
	    }
	    StringBuffer buff = new StringBuffer();
	    buff.append("no such method <init>(");
	    for (int i = 0; i < args.length; i++) {
		if (i != 0) buff.append(", ");
		if (args[i] == null)
		    buff.append("null");
		else
		    buff.append(args[i].getClass().getName());
	    }
	    buff.append(") for ");
	    buff.append(((Class) cls).getName());
	    throw new NoSuchMethodException(new String(buff));
	} else {
	    int[] dimensions = new int[jjtGetNumChildren() - 1];
	    for (int i = 1; i < jjtGetNumChildren(); i++) {
		Object obj = ((SimpleNode) jjtGetChild(i)).evaluate(demi);
		if (!(obj instanceof Number))
		    throw new IllegalTypeException(obj, "Number");
		dimensions[i - 1] = ((Number) obj).intValue();
	    }
	    return Array.newInstance((Class) cls, dimensions);
	}
    }
}
