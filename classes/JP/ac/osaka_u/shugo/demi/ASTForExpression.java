/* Generated By:JJTree: Do not edit this line. ASTForExpression.java */

package JP.ac.osaka_u.shugo.demi;

import java.util.*;
import java.lang.reflect.*;

public class ASTForExpression extends SimpleNode {

    Symbol loopVariable;

    public ASTForExpression(int id) {
	super(id);
    }

    public ASTForExpression(Parser p, int id) {
	super(p, id);
    }

    protected Object evaluate0(Demi demi) throws Throwable {
	Scope scope = demi.getScope();
	Object obj = ((SimpleNode) jjtGetChild(0)).evaluate(demi);
	SimpleNode expressionList = (SimpleNode) jjtGetChild(1);
	if (obj.getClass().isArray()) {
	    int length = Array.getLength(obj);
	    for (int i = 0; i < length; i++) {
		Object val = Array.get(obj, i);
		scope.setVariable(loopVariable, val);
		try {
		    expressionList.evaluate(demi);
		} catch (Break b) {
		    if (b.scope == scope) {
			break;
		    } else {
			throw b;
		    }
		} catch (Continue c) {
		    if (c.scope == scope) {
			continue;
		    } else {
			throw c;
		    }
		}
	    }
	} else if (obj instanceof String) {
	    String str = (String) obj;
	    for (int i = 0; i < str.length(); i++) {
		Character ch = new Character(str.charAt(i));
		scope.setVariable(loopVariable, ch);
		try {
		    expressionList.evaluate(demi);
		} catch (Break b) {
		    if (b.scope == scope) {
			break;
		    } else {
			throw b;
		    }
		} catch (Continue c) {
		    if (c.scope == scope) {
			continue;
		    } else {
			throw c;
		    }
		}
	    }
	} else {
	    if (!(obj instanceof Enumeration)) {
		try {
		    Method method = obj.getClass().getMethod("elements",
							     new Class[0]);
		    obj = method.invoke(obj, new Object[0]);
		} catch (NoSuchMethodException e) {
		}
	    }
	    if (!(obj instanceof Enumeration)) {
		throw new IllegalTypeException(obj, "Enumeration");
	    }
	    while (((Enumeration) obj).hasMoreElements()) {
		Object val = ((Enumeration) obj).nextElement();
		scope.setVariable(loopVariable, val);
		try {
		    expressionList.evaluate(demi);
		} catch (Break b) {
		    if (b.scope == scope) {
			break;
		    } else {
			throw b;
		    }
		} catch (Continue c) {
		    if (c.scope == scope) {
			continue;
		    } else {
			throw c;
		    }
		}
	    }
	}
	return null;
    }
}
