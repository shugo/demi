/* Generated By:JJTree: Do not edit this line. ASTFunctionCall.java */

package JP.ac.osaka_u.shugo.demi;

import java.lang.reflect.*;

public class ASTFunctionCall extends SimpleNode {

    public ASTFunctionCall(int id) {
	super(id);
    }

    public ASTFunctionCall(Parser p, int id) {
	super(p, id);
    }

    protected Object evaluate0(Demi demi) throws Throwable {
	Object[] args =
	    ((ASTArgumentList) jjtGetChild(1)).getArguments(demi);
	if (jjtGetChild(0) instanceof ASTMemberAccess) {
	    ASTMemberAccess ma = (ASTMemberAccess) jjtGetChild(0);
	    String name = ma.getName();
	    Object recv;
	    Class cls;
	    boolean staticMethod = false;
	    if (ma instanceof ASTStaticMemberAccess) {
		Object obj = ((SimpleNode) ma.jjtGetChild(0)).evaluate(demi);
		if (obj instanceof Module) {
		    Object func = ma.evaluate(demi);
		    if (func instanceof Function) {
			demi.pushCallInfo((Function) func, this);
			try {
			    return ((Function) func).call(args);
			} finally {
			    demi.popCallInfo();
			}
		    } else {
			throw new IllegalTypeException(
				    "call of non-function " + func);
		    }
		}
		if (!(obj instanceof Class))
		    throw new IllegalTypeException(obj, "Class or Module");
		cls = (Class) obj;
		recv = null;
		staticMethod = true;
	    } else {
		recv = ((SimpleNode) ma.jjtGetChild(0)).evaluate(demi);
		cls = recv.getClass();
	    }
	    Method[] methods = cls.getMethods();
	outer:
	    for (int i = 0; i < methods.length; i++) {
		if (staticMethod &&
		    !Modifier.isStatic(methods[i].getModifiers()))
		    continue;
		if (!methods[i].getName().equals(name))
		    continue;
		Class[] paramtypes = methods[i].getParameterTypes();
		if (args.length != paramtypes.length)
		    continue;
		for (int j = 0; j < args.length; j++) {
		    if (!Demi.canConvert(args[j], paramtypes[j]))
			continue outer;
		}
		for (int j = 0; j < args.length; j++) {
		    args[j] = Demi.convert(args[j], paramtypes[j]);
		}
		return methods[i].invoke(recv, args);
	    }
	    try {
		Object func = ma.evaluate(demi);
		if (func instanceof Function) {
		    demi.pushCallInfo((Function) func, this);
		    try {
			return ((Function) func).call(args);
		    } finally {
			demi.popCallInfo();
		    }
		}
	    } catch (DemiException e) {
		if (!(e.getOriginalException()
		      instanceof NoSuchFieldException))
		    throw e;
	    }
	    StringBuffer buff = new StringBuffer();
	    buff.append("no method matching ");
	    buff.append(name);
	    buff.append("(");
	    for (int i = 0; i < args.length; i++) {
		if (i != 0) buff.append(", ");
		if (args[i] == null)
		    buff.append("null");
		else
		    buff.append(args[i].getClass().getName());
	    }
	    buff.append(") found in class ");
	    buff.append(cls.getName());
	    throw new NoSuchMethodException(new String(buff));
	} else {
	    Object func = ((SimpleNode) jjtGetChild(0)).evaluate(demi);
	    if (func instanceof Function) {
		demi.pushCallInfo((Function) func, this);
		try {
		    return ((Function) func).call(args);
		} finally {
		    demi.popCallInfo();
		}
	    } else {
		throw new IllegalTypeException("call of non-function " +
					       func);
	    }
	}
    }
}
