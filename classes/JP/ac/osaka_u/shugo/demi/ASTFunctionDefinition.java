/* Generated By:JJTree: Do not edit this line. ASTFunctionDefinition.java */

package JP.ac.osaka_u.shugo.demi;

import java.util.*;

public class ASTFunctionDefinition extends SimpleNode {

    Symbol name;
    Vector args = new Vector();
    Vector defaults = new Vector();
    Symbol rest = null;

    public ASTFunctionDefinition(int id) {
	super(id);
    }

    public ASTFunctionDefinition(Parser p, int id) {
	super(p, id);
    }

    protected Object evaluate0(Demi demi) throws Throwable {
	Scope scope = demi.getScope();
	Symbol[] argumentList = new Symbol[args.size()];
	args.copyInto(argumentList);
	int min = argumentList.length;
	if (!defaults.isEmpty())
	    min = ((Integer) defaults.firstElement()).intValue();
	SymbolTable defaultValues = new SymbolTable();
	for (int i = 0; i < defaults.size(); i++) {
	    int j = ((Integer) defaults.elementAt(i)).intValue();
	    defaultValues.put(argumentList[j],
			      ((SimpleNode) jjtGetChild(i))
			      .evaluate(demi));
	}
	SimpleNode body =
	    (SimpleNode) jjtGetChild(jjtGetNumChildren() - 1);
	ModuleFunction func =
	    new ModuleFunction(demi, scope.module,
			       name, argumentList, min,
			       defaultValues, rest, body);
	scope.module.setVariable(name, func);
	return func;
    }
}
