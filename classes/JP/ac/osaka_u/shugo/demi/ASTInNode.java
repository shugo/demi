/* Generated By:JJTree: Do not edit this line. ASTInNode.java */

package JP.ac.osaka_u.shugo.demi;

import java.lang.reflect.*;

public class ASTInNode extends SimpleNode {
    public ASTInNode(int id) {
	super(id);
    }

    public ASTInNode(Parser p, int id) {
	super(p, id);
    }

    public static Node jjtCreate(int id) {
	return new ASTInNode(id);
    }

    public static Node jjtCreate(Parser p, int id) {
	return new ASTInNode(p, id);
    }

    protected Object evaluate0(Demi demi) throws Throwable {
	Object left = ((SimpleNode) jjtGetChild(0)).evaluate(demi);
	Object right = ((SimpleNode) jjtGetChild(1)).evaluate(demi);
	if (right.getClass().isArray()) {
	    int length = Array.getLength(right);
	    for (int i = 0; i < length; i++) {
		Object obj = Array.get(right, i);
		if (left.equals(obj))
		    return Boolean.TRUE;
	    }
	    return Boolean.FALSE;
	} else if (right instanceof String) {
	    String str = (String) right;
	    if (left instanceof String) {
		String s = (String) left;
		return new Boolean(str.indexOf(s) != -1);
	    } else if (left instanceof Character) {
		char ch = ((Character) left).charValue();
		return new Boolean(str.indexOf(ch) != -1);
	    } else {
		return Boolean.FALSE;
	    }
	} else {
	    Class[] paramTypes;
	    Method method;
	    paramTypes = new Class[]{Class.forName("java.lang.Object")};
	    try {
		method = right.getClass().getMethod("contains", paramTypes);
		return method.invoke(right, new Object[]{left});
	    } catch (NoSuchMethodException e) {
		throw new NoSuchMethodException("in");
	    }
	}
    }
}
