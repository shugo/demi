/* Generated By:JJTree: Do not edit this line. ASTStaticMemberAccess.java */

package JP.ac.osaka_u.shugo.demi;

import java.lang.reflect.*;

public class ASTStaticMemberAccess extends ASTMemberAccess {
    public ASTStaticMemberAccess(int id) {
	super(id);
    }

    public ASTStaticMemberAccess(Parser p, int id) {
	super(p, id);
    }

    protected Object evaluate0(Demi demi) throws Throwable {
	Object obj = ((SimpleNode) jjtGetChild(0)).evaluate(demi);
	if (obj instanceof Class) {
	    String name = symbol.getName();
	    try {
		Field field = ((Class) obj).getField(name);
		if (!Modifier.isStatic(field.getModifiers())) {
		    String msg = name + " is not static field";
		    throw new NoSuchFieldException(msg);
		}
		return field.get(null);
	    } catch (NoSuchFieldException e) {
		String msg = "no such field " + name +
		    " for " + ((Class) obj).getName();
		throw new NoSuchFieldException(msg);
	    }
	} else if (obj instanceof Module) {
	    return ((Module) obj).getVariable(symbol);
	} else {
	    throw new IllegalTypeException(obj, "Class or Module");
	}
    }
}
