/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*//* Parser.jjt */

options {
    STATIC = false;
    JAVA_UNICODE_ESCAPE = true;                                                                           
}

PARSER_BEGIN(Parser)

package JP.ac.osaka_u.shugo.demi;

import java.util.*;
import java.math.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/

    String fileName = "-";
    boolean inFunctionDefinition = false;

    void jjtreeOpenNodeScope(Node n) {
	Token t = getToken(1);
	((SimpleNode) n).line = t.beginLine;
    }

    void jjtreeCloseNodeScope(Node n) {
    }

    private static String processEscape(String str) {
	StringBuffer buff = new StringBuffer();
	for (int i = 0; i < str.length(); i++) {
	    char c = str.charAt(i);
	    if (c == '\\') {
		i++;
		c = str.charAt(i);
		switch (c) {
		case 'n':
		    buff.append('\n');
		    break;
		case 't':
		    buff.append('\t');
		    break;
		case 'b':
		    buff.append('\b');
		    break;
		case 'r':
		    buff.append('\r');
		    break;
		case 'f':
		    buff.append('\f');
		    break;
		case '\\':
		    buff.append('\\');
		    break;
		case '\'':
		    buff.append('\'');
		    break;
		case '"':
		    buff.append('"');
		    break;
		default:
		    if (c >= '0' && c <= '7') {
			StringBuffer tmp = new StringBuffer();
			tmp.append(c);
			for (int j = 0; j < 2; j++) {
			    if (i < str.length() - 1) {
				char ch = str.charAt(i + 1);
				if (ch >= '0' && ch <= '7') {
				    tmp.append(ch);
				    i++;
				} else {
				    break;
				}
			    } else {
				break;
			    }
			}
			char ch =
			    (char) Integer.parseInt(new String(tmp), 8);
			buff.append(ch);
		    } else {
			buff.append(c);
		    }
		}
	    } else {
		buff.append(c);
	    }
	}
	return new String(buff);
    }
}

PARSER_END(Parser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS */

TOKEN :
{
  < BREAK: "break" >
| < CATCH: "catch" >
| < CLASS: "class" >
| < CONTINUE: "continue" >
| < DEF: "def" >
| < ELSE: "else" >
| < ELSIF: "elsif" >
| < END: "end" >
| < EXCEPTION: "exception" >
| < FALSE: "false" >
| < FINALLY: "finally" >
| < FOR: "for" >
| < IF: "if" >
| < IN: "in" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < MODULE: "module" >
| < NEW: "new" >
| < NULL: "null" >
| < RETURN: "return" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < TRUE: "true" >
| < TRY: "try" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < DECIMAL_LITERAL: "0" | ["1"-"9"] (["0"-"9"])* >
|
  < HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < OCTAL_LITERAL: "0" (["0"-"7"])+ >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN :
{
  < SYMBOL: "#" <IDENTIFIER> >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < COLON2: "::" >
| < EQ: "==" >
| < IEQ: "===" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < DOT2: ".." >
| < SHARP: "#" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < INCR: "++" >
| < DECR: "--" >
}

String JavaIdentifier()      :
{
  Token t;
}
{
  ( t = <IDENTIFIER> | t = "def" | t = "elsif" | t = "end"
  | t = "exception" | t = "in" | t = "module" )
  {
    return t.image;
  }
}

void CompilationUnit()      :
{}
{
    ExpressionList() <EOF>
}

void ExpressionList() :
{/*@bgen(jjtree) ExpressionList */
  ASTExpressionList jjtn000 = new ASTExpressionList(this, JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionList */
  try {
/*@egen*/
  [ Expression() ] ( ";" [ Expression() ] )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Expression()      :
{}
{
  Import()
|
  Break()
|
  Continue()
|
  Return()
|
  Throw()
|
  ConditionalOrExpression() [ Assignment() ]
}

void Import() :
{/*@bgen(jjtree) Import */
  ASTImport jjtn000 = new ASTImport(this, JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Import */
  try {
/*@egen*/
  "import"
  t = <IDENTIFIER> { jjtn000.packageName = t.image; }
  (
    "." t = <IDENTIFIER>
    {
	jjtn000.packageName += ".";
	jjtn000.packageName += t.image;
    }
  )*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Break() :
{/*@bgen(jjtree) Break */
  ASTBreak jjtn000 = new ASTBreak(this, JJTBREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Break */
  try {
/*@egen*/
  "break"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Continue() :
{/*@bgen(jjtree) Continue */
  ASTContinue jjtn000 = new ASTContinue(this, JJTCONTINUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Continue */
  try {
/*@egen*/
  "continue"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Return() :
{/*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(this, JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Return */
  try {
/*@egen*/
  t = "return"
  {
      if (!inFunctionDefinition) {
	  throw new ParseException("return appeared outside of function " +
				   "at line " + t.beginLine +
				   ", column " + t.beginColumn + ".");
      }
  }
  [ Expression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Throw() :
{/*@bgen(jjtree) Throw */
  ASTThrow jjtn000 = new ASTThrow(this, JJTTHROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Throw */
  try {
/*@egen*/
  "throw" Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Assignment()      :
{}
{
  "="/*@bgen(jjtree) #Assignment( 2) */
      {
        ASTAssignment jjtn001 = new ASTAssignment(this, JJTASSIGNMENT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/
|
  "+="/*@bgen(jjtree) #AddAssign( 2) */
       {
         ASTAddAssign jjtn002 = new ASTAddAssign(this, JJTADDASSIGN);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
         jjtreeOpenNodeScope(jjtn002);
       }
       try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
       } catch (Throwable jjte002) {
         if (jjtc002) {
           jjtree.clearNodeScope(jjtn002);
           jjtc002 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte002 instanceof ParseException) {
           throw (ParseException)jjte002;
         }
         if (jjte002 instanceof RuntimeException) {
           throw (RuntimeException)jjte002;
         }
         throw (Error)jjte002;
       } finally {
         if (jjtc002) {
           jjtree.closeNodeScope(jjtn002,  2);
           jjtreeCloseNodeScope(jjtn002);
         }
       }
/*@egen*/
|
  "-="/*@bgen(jjtree) #SubAssign( 2) */
       {
         ASTSubAssign jjtn003 = new ASTSubAssign(this, JJTSUBASSIGN);
         boolean jjtc003 = true;
         jjtree.openNodeScope(jjtn003);
         jjtreeOpenNodeScope(jjtn003);
       }
       try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
       } catch (Throwable jjte003) {
         if (jjtc003) {
           jjtree.clearNodeScope(jjtn003);
           jjtc003 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte003 instanceof ParseException) {
           throw (ParseException)jjte003;
         }
         if (jjte003 instanceof RuntimeException) {
           throw (RuntimeException)jjte003;
         }
         throw (Error)jjte003;
       } finally {
         if (jjtc003) {
           jjtree.closeNodeScope(jjtn003,  2);
           jjtreeCloseNodeScope(jjtn003);
         }
       }
/*@egen*/
|
  "*="/*@bgen(jjtree) #MulAssign( 2) */
       {
         ASTMulAssign jjtn004 = new ASTMulAssign(this, JJTMULASSIGN);
         boolean jjtc004 = true;
         jjtree.openNodeScope(jjtn004);
         jjtreeOpenNodeScope(jjtn004);
       }
       try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
       } catch (Throwable jjte004) {
         if (jjtc004) {
           jjtree.clearNodeScope(jjtn004);
           jjtc004 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte004 instanceof ParseException) {
           throw (ParseException)jjte004;
         }
         if (jjte004 instanceof RuntimeException) {
           throw (RuntimeException)jjte004;
         }
         throw (Error)jjte004;
       } finally {
         if (jjtc004) {
           jjtree.closeNodeScope(jjtn004,  2);
           jjtreeCloseNodeScope(jjtn004);
         }
       }
/*@egen*/
|
  "/="/*@bgen(jjtree) #DivAssign( 2) */
       {
         ASTDivAssign jjtn005 = new ASTDivAssign(this, JJTDIVASSIGN);
         boolean jjtc005 = true;
         jjtree.openNodeScope(jjtn005);
         jjtreeOpenNodeScope(jjtn005);
       }
       try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
       } catch (Throwable jjte005) {
         if (jjtc005) {
           jjtree.clearNodeScope(jjtn005);
           jjtc005 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte005 instanceof ParseException) {
           throw (ParseException)jjte005;
         }
         if (jjte005 instanceof RuntimeException) {
           throw (RuntimeException)jjte005;
         }
         throw (Error)jjte005;
       } finally {
         if (jjtc005) {
           jjtree.closeNodeScope(jjtn005,  2);
           jjtreeCloseNodeScope(jjtn005);
         }
       }
/*@egen*/
|
  "%="/*@bgen(jjtree) #ModAssign( 2) */
       {
         ASTModAssign jjtn006 = new ASTModAssign(this, JJTMODASSIGN);
         boolean jjtc006 = true;
         jjtree.openNodeScope(jjtn006);
         jjtreeOpenNodeScope(jjtn006);
       }
       try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
       } catch (Throwable jjte006) {
         if (jjtc006) {
           jjtree.clearNodeScope(jjtn006);
           jjtc006 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte006 instanceof ParseException) {
           throw (ParseException)jjte006;
         }
         if (jjte006 instanceof RuntimeException) {
           throw (RuntimeException)jjte006;
         }
         throw (Error)jjte006;
       } finally {
         if (jjtc006) {
           jjtree.closeNodeScope(jjtn006,  2);
           jjtreeCloseNodeScope(jjtn006);
         }
       }
/*@egen*/
|
  "&="/*@bgen(jjtree) #AndAssign( 2) */
       {
         ASTAndAssign jjtn007 = new ASTAndAssign(this, JJTANDASSIGN);
         boolean jjtc007 = true;
         jjtree.openNodeScope(jjtn007);
         jjtreeOpenNodeScope(jjtn007);
       }
       try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
       } catch (Throwable jjte007) {
         if (jjtc007) {
           jjtree.clearNodeScope(jjtn007);
           jjtc007 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte007 instanceof ParseException) {
           throw (ParseException)jjte007;
         }
         if (jjte007 instanceof RuntimeException) {
           throw (RuntimeException)jjte007;
         }
         throw (Error)jjte007;
       } finally {
         if (jjtc007) {
           jjtree.closeNodeScope(jjtn007,  2);
           jjtreeCloseNodeScope(jjtn007);
         }
       }
/*@egen*/
|
  "|="/*@bgen(jjtree) #OrAssign( 2) */
       {
         ASTOrAssign jjtn008 = new ASTOrAssign(this, JJTORASSIGN);
         boolean jjtc008 = true;
         jjtree.openNodeScope(jjtn008);
         jjtreeOpenNodeScope(jjtn008);
       }
       try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
       } catch (Throwable jjte008) {
         if (jjtc008) {
           jjtree.clearNodeScope(jjtn008);
           jjtc008 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte008 instanceof ParseException) {
           throw (ParseException)jjte008;
         }
         if (jjte008 instanceof RuntimeException) {
           throw (RuntimeException)jjte008;
         }
         throw (Error)jjte008;
       } finally {
         if (jjtc008) {
           jjtree.closeNodeScope(jjtn008,  2);
           jjtreeCloseNodeScope(jjtn008);
         }
       }
/*@egen*/
|
  "^="/*@bgen(jjtree) #XorAssign( 2) */
       {
         ASTXorAssign jjtn009 = new ASTXorAssign(this, JJTXORASSIGN);
         boolean jjtc009 = true;
         jjtree.openNodeScope(jjtn009);
         jjtreeOpenNodeScope(jjtn009);
       }
       try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
       } catch (Throwable jjte009) {
         if (jjtc009) {
           jjtree.clearNodeScope(jjtn009);
           jjtc009 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte009 instanceof ParseException) {
           throw (ParseException)jjte009;
         }
         if (jjte009 instanceof RuntimeException) {
           throw (RuntimeException)jjte009;
         }
         throw (Error)jjte009;
       } finally {
         if (jjtc009) {
           jjtree.closeNodeScope(jjtn009,  2);
           jjtreeCloseNodeScope(jjtn009);
         }
       }
/*@egen*/
|
  "<<="/*@bgen(jjtree) #LShiftAssign( 2) */
        {
          ASTLShiftAssign jjtn010 = new ASTLShiftAssign(this, JJTLSHIFTASSIGN);
          boolean jjtc010 = true;
          jjtree.openNodeScope(jjtn010);
          jjtreeOpenNodeScope(jjtn010);
        }
        try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte010) {
          if (jjtc010) {
            jjtree.clearNodeScope(jjtn010);
            jjtc010 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte010 instanceof ParseException) {
            throw (ParseException)jjte010;
          }
          if (jjte010 instanceof RuntimeException) {
            throw (RuntimeException)jjte010;
          }
          throw (Error)jjte010;
        } finally {
          if (jjtc010) {
            jjtree.closeNodeScope(jjtn010,  2);
            jjtreeCloseNodeScope(jjtn010);
          }
        }
/*@egen*/
|
  ">>="/*@bgen(jjtree) #RShiftAssign( 2) */
        {
          ASTRShiftAssign jjtn011 = new ASTRShiftAssign(this, JJTRSHIFTASSIGN);
          boolean jjtc011 = true;
          jjtree.openNodeScope(jjtn011);
          jjtreeOpenNodeScope(jjtn011);
        }
        try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte011) {
          if (jjtc011) {
            jjtree.clearNodeScope(jjtn011);
            jjtc011 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte011 instanceof ParseException) {
            throw (ParseException)jjte011;
          }
          if (jjte011 instanceof RuntimeException) {
            throw (RuntimeException)jjte011;
          }
          throw (Error)jjte011;
        } finally {
          if (jjtc011) {
            jjtree.closeNodeScope(jjtn011,  2);
            jjtreeCloseNodeScope(jjtn011);
          }
        }
/*@egen*/
|
  ">>>="/*@bgen(jjtree) #RUShiftAssign( 2) */
         {
           ASTRUShiftAssign jjtn012 = new ASTRUShiftAssign(this, JJTRUSHIFTASSIGN);
           boolean jjtc012 = true;
           jjtree.openNodeScope(jjtn012);
           jjtreeOpenNodeScope(jjtn012);
         }
         try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
         } catch (Throwable jjte012) {
           if (jjtc012) {
             jjtree.clearNodeScope(jjtn012);
             jjtc012 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte012 instanceof ParseException) {
             throw (ParseException)jjte012;
           }
           if (jjte012 instanceof RuntimeException) {
             throw (RuntimeException)jjte012;
           }
           throw (Error)jjte012;
         } finally {
           if (jjtc012) {
             jjtree.closeNodeScope(jjtn012,  2);
             jjtreeCloseNodeScope(jjtn012);
           }
         }
/*@egen*/
}

void ConditionalOrExpression()      :
{}
{
  ConditionalAndExpression() ( "||"/*@bgen(jjtree) #OrNode( 2) */
                                    {
                                      ASTOrNode jjtn001 = new ASTOrNode(this, JJTORNODE);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtreeOpenNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ ConditionalAndExpression()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        jjtreeCloseNodeScope(jjtn001);
                                      }
                                    }
/*@egen*/ )*
}

void ConditionalAndExpression()      :
{}
{
  InclusiveOrExpression() ( "&&"/*@bgen(jjtree) #AndNode( 2) */
                                 {
                                   ASTAndNode jjtn001 = new ASTAndNode(this, JJTANDNODE);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtreeOpenNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*/ InclusiveOrExpression()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     throw (ParseException)jjte001;
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte001;
                                   }
                                   throw (Error)jjte001;
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtreeCloseNodeScope(jjtn001);
                                   }
                                 }
/*@egen*/ )*
}

void InclusiveOrExpression()      :
{}
{
  ExclusiveOrExpression() ( "|"/*@bgen(jjtree) #BitwiseOrNode( 2) */
                                {
                                  ASTBitwiseOrNode jjtn001 = new ASTBitwiseOrNode(this, JJTBITWISEORNODE);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ ExclusiveOrExpression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
                                }
/*@egen*/ )*
}

void ExclusiveOrExpression()      :
{}
{
  AndExpression() ( "^"/*@bgen(jjtree) #BitwiseXorNode( 2) */
                        {
                          ASTBitwiseXorNode jjtn001 = new ASTBitwiseXorNode(this, JJTBITWISEXORNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtreeOpenNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ AndExpression()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                            jjtreeCloseNodeScope(jjtn001);
                          }
                        }
/*@egen*/ )*
}

void AndExpression()      :
{}
{
  EqualityExpression() ( "&"/*@bgen(jjtree) #BitwiseAndNode( 2) */
                             {
                               ASTBitwiseAndNode jjtn001 = new ASTBitwiseAndNode(this, JJTBITWISEANDNODE);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtreeOpenNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                                 jjtreeCloseNodeScope(jjtn001);
                               }
                             }
/*@egen*/ )*
}

void EqualityExpression()      :
{}
{
  InstanceOfExpression()
  (
    "=="/*@bgen(jjtree) #EqualNode( 2) */
         {
           ASTEqualNode jjtn001 = new ASTEqualNode(this, JJTEQUALNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
         }
         try {
/*@egen*/ InstanceOfExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtreeCloseNodeScope(jjtn001);
           }
         }
/*@egen*/
   |
    "!="/*@bgen(jjtree) #NotEqualNode( 2) */
         {
           ASTNotEqualNode jjtn002 = new ASTNotEqualNode(this, JJTNOTEQUALNODE);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtreeOpenNodeScope(jjtn002);
         }
         try {
/*@egen*/ InstanceOfExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof ParseException) {
             throw (ParseException)jjte002;
           }
           if (jjte002 instanceof RuntimeException) {
             throw (RuntimeException)jjte002;
           }
           throw (Error)jjte002;
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  2);
             jjtreeCloseNodeScope(jjtn002);
           }
         }
/*@egen*/
   |
    "==="/*@bgen(jjtree) #IdentityEqualNode( 2) */
          {
            ASTIdentityEqualNode jjtn003 = new ASTIdentityEqualNode(this, JJTIDENTITYEQUALNODE);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtreeOpenNodeScope(jjtn003);
          }
          try {
/*@egen*/ InstanceOfExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  2);
              jjtreeCloseNodeScope(jjtn003);
            }
          }
/*@egen*/
  )*
}

void InstanceOfExpression()      :
{}
{
  InExpression()
  [ "instanceof"/*@bgen(jjtree) #InstanceOfNode( 2) */
                 {
                   ASTInstanceOfNode jjtn001 = new ASTInstanceOfNode(this, JJTINSTANCEOFNODE);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtreeOpenNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ PrimaryExpression()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtreeCloseNodeScope(jjtn001);
                   }
                 }
/*@egen*/ ]
}

void InExpression()      :
{}
{
  RangeExpression() ( "in"/*@bgen(jjtree) #InNode( 2) */
                           {
                             ASTInNode jjtn001 = new ASTInNode(this, JJTINNODE);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtreeOpenNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ RangeExpression()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                               jjtreeCloseNodeScope(jjtn001);
                             }
                           }
/*@egen*/ )*
}

void RangeExpression()      :
{}
{
  RelationalExpression() ( ".."/*@bgen(jjtree) #RangeNode( 2) */
                                {
                                  ASTRangeNode jjtn001 = new ASTRangeNode(this, JJTRANGENODE);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
                                }
/*@egen*/ )*
}

void RelationalExpression()      :
{}
{
  ShiftExpression()
  (
    "<"/*@bgen(jjtree) #LessThanNode( 2) */
        {
          ASTLessThanNode jjtn001 = new ASTLessThanNode(this, JJTLESSTHANNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/
   |
    ">"/*@bgen(jjtree) #GreaterThanNode( 2) */
        {
          ASTGreaterThanNode jjtn002 = new ASTGreaterThanNode(this, JJTGREATERTHANNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
        }
        try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
            jjtreeCloseNodeScope(jjtn002);
          }
        }
/*@egen*/
   | 
    "<="/*@bgen(jjtree) #LessEqualNode( 2) */
         {
           ASTLessEqualNode jjtn003 = new ASTLessEqualNode(this, JJTLESSEQUALNODE);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtreeOpenNodeScope(jjtn003);
         }
         try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte003) {
           if (jjtc003) {
             jjtree.clearNodeScope(jjtn003);
             jjtc003 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte003 instanceof ParseException) {
             throw (ParseException)jjte003;
           }
           if (jjte003 instanceof RuntimeException) {
             throw (RuntimeException)jjte003;
           }
           throw (Error)jjte003;
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  2);
             jjtreeCloseNodeScope(jjtn003);
           }
         }
/*@egen*/
   | 
    ">="/*@bgen(jjtree) #GreaterEqualNode( 2) */
         {
           ASTGreaterEqualNode jjtn004 = new ASTGreaterEqualNode(this, JJTGREATEREQUALNODE);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
           jjtreeOpenNodeScope(jjtn004);
         }
         try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte004) {
           if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof ParseException) {
             throw (ParseException)jjte004;
           }
           if (jjte004 instanceof RuntimeException) {
             throw (RuntimeException)jjte004;
           }
           throw (Error)jjte004;
         } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  2);
             jjtreeCloseNodeScope(jjtn004);
           }
         }
/*@egen*/
  )*
}

void ShiftExpression()      :
{}
{
  AdditiveExpression()
  (
    "<<"/*@bgen(jjtree) #LShiftNode( 2) */
         {
           ASTLShiftNode jjtn001 = new ASTLShiftNode(this, JJTLSHIFTNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
         }
         try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtreeCloseNodeScope(jjtn001);
           }
         }
/*@egen*/
   |
    ">>"/*@bgen(jjtree) #RSignedShiftNode( 2) */
         {
           ASTRSignedShiftNode jjtn002 = new ASTRSignedShiftNode(this, JJTRSIGNEDSHIFTNODE);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtreeOpenNodeScope(jjtn002);
         }
         try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof ParseException) {
             throw (ParseException)jjte002;
           }
           if (jjte002 instanceof RuntimeException) {
             throw (RuntimeException)jjte002;
           }
           throw (Error)jjte002;
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  2);
             jjtreeCloseNodeScope(jjtn002);
           }
         }
/*@egen*/
   |
    ">>>"/*@bgen(jjtree) #RUnsignedShiftNode( 2) */
          {
            ASTRUnsignedShiftNode jjtn003 = new ASTRUnsignedShiftNode(this, JJTRUNSIGNEDSHIFTNODE);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtreeOpenNodeScope(jjtn003);
          }
          try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  2);
              jjtreeCloseNodeScope(jjtn003);
            }
          }
/*@egen*/
  )*
}

void AdditiveExpression()      :
{}
{
  MultiplicativeExpression()
  (
    "+"/*@bgen(jjtree) #AddNode( 2) */
        {
          ASTAddNode jjtn001 = new ASTAddNode(this, JJTADDNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/
   |
    "-"/*@bgen(jjtree) #SubNode( 2) */
        {
          ASTSubNode jjtn002 = new ASTSubNode(this, JJTSUBNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
        }
        try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
            jjtreeCloseNodeScope(jjtn002);
          }
        }
/*@egen*/
  )*
}

void MultiplicativeExpression()      :
{}
{
  UnaryExpression()
  (
    "*"/*@bgen(jjtree) #MulNode( 2) */
        {
          ASTMulNode jjtn001 = new ASTMulNode(this, JJTMULNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/
   |
    "/"/*@bgen(jjtree) #DivNode( 2) */
        {
          ASTDivNode jjtn002 = new ASTDivNode(this, JJTDIVNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
        }
        try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
            jjtreeCloseNodeScope(jjtn002);
          }
        }
/*@egen*/
   |
    "%"/*@bgen(jjtree) #ModNode( 2) */
        {
          ASTModNode jjtn003 = new ASTModNode(this, JJTMODNODE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtreeOpenNodeScope(jjtn003);
        }
        try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof ParseException) {
            throw (ParseException)jjte003;
          }
          if (jjte003 instanceof RuntimeException) {
            throw (RuntimeException)jjte003;
          }
          throw (Error)jjte003;
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
            jjtreeCloseNodeScope(jjtn003);
          }
        }
/*@egen*/
  )*
}

void UnaryExpression()      :
{}
{
  "+"/*@bgen(jjtree) #UnaryPlusNode( 1) */
      {
        ASTUnaryPlusNode jjtn001 = new ASTUnaryPlusNode(this, JJTUNARYPLUSNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  1);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/
|
  "-"/*@bgen(jjtree) #UnaryMinusNode( 1) */
      {
        ASTUnaryMinusNode jjtn002 = new ASTUnaryMinusNode(this, JJTUNARYMINUSNODE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      }
      try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  1);
          jjtreeCloseNodeScope(jjtn002);
        }
      }
/*@egen*/
|
  "++"/*@bgen(jjtree) #PreIncNode( 1) */
       {
         ASTPreIncNode jjtn003 = new ASTPreIncNode(this, JJTPREINCNODE);
         boolean jjtc003 = true;
         jjtree.openNodeScope(jjtn003);
         jjtreeOpenNodeScope(jjtn003);
       }
       try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
       } catch (Throwable jjte003) {
         if (jjtc003) {
           jjtree.clearNodeScope(jjtn003);
           jjtc003 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte003 instanceof ParseException) {
           throw (ParseException)jjte003;
         }
         if (jjte003 instanceof RuntimeException) {
           throw (RuntimeException)jjte003;
         }
         throw (Error)jjte003;
       } finally {
         if (jjtc003) {
           jjtree.closeNodeScope(jjtn003,  1);
           jjtreeCloseNodeScope(jjtn003);
         }
       }
/*@egen*/
|
  "--"/*@bgen(jjtree) #PreDecNode( 1) */
       {
         ASTPreDecNode jjtn004 = new ASTPreDecNode(this, JJTPREDECNODE);
         boolean jjtc004 = true;
         jjtree.openNodeScope(jjtn004);
         jjtreeOpenNodeScope(jjtn004);
       }
       try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
       } catch (Throwable jjte004) {
         if (jjtc004) {
           jjtree.clearNodeScope(jjtn004);
           jjtc004 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte004 instanceof ParseException) {
           throw (ParseException)jjte004;
         }
         if (jjte004 instanceof RuntimeException) {
           throw (RuntimeException)jjte004;
         }
         throw (Error)jjte004;
       } finally {
         if (jjtc004) {
           jjtree.closeNodeScope(jjtn004,  1);
           jjtreeCloseNodeScope(jjtn004);
         }
       }
/*@egen*/
|
  UnaryExpressionNotPlusMinus()
}

void UnaryExpressionNotPlusMinus()      :
{}
{
  "~"/*@bgen(jjtree) #BitwiseComplNode( 1) */
      {
        ASTBitwiseComplNode jjtn001 = new ASTBitwiseComplNode(this, JJTBITWISECOMPLNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  1);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/
|
  "!"/*@bgen(jjtree) #NotNode( 1) */
      {
        ASTNotNode jjtn002 = new ASTNotNode(this, JJTNOTNODE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      }
      try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  1);
          jjtreeCloseNodeScope(jjtn002);
        }
      }
/*@egen*/
|
  PrimaryExpression()
  [/*@bgen(jjtree) #PostIncNode( 1) */
    {
      ASTPostIncNode jjtn003 = new ASTPostIncNode(this, JJTPOSTINCNODE);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
    }
    try {
/*@egen*/
    "++"/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  1);
        jjtreeCloseNodeScope(jjtn003);
      }
    }
/*@egen*/
  |/*@bgen(jjtree) #PostDecNode( 1) */
    {
      ASTPostDecNode jjtn004 = new ASTPostDecNode(this, JJTPOSTDECNODE);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      jjtreeOpenNodeScope(jjtn004);
    }
    try {
/*@egen*/
    "--"/*@bgen(jjtree)*/
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004,  1);
        jjtreeCloseNodeScope(jjtn004);
      }
    }
/*@egen*/
  ]
}

void PrimaryExpression()      :
{
  Token t;
}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix()      :
{}
{
  "(" Expression() ")"
|
  Literal()
|
  Symbol()
|
  ClassExpression()
|
  AllocationExpression()
|
  Variable()
|
  This()
|
  Exception()
|
  IfExpression()
|
  WhileExpression()
|
  ForExpression()
|
  TryExpression()
|
  SynchronizedExpression()
|
  FunctionDefinition()
|
  Closure()
|
  ModuleDefinition()
|
  LOOKAHEAD(2)
  ArrayExpression()
|
  VectorExpression()
|
  HashExpression()
}

void Literal()      :
{}
{
  IntegerLiteral()
|
  FloatingPointLiteral()
|
  CharacterLiteral()
|
  StringLiteral()
|
  BooleanLiteral()
|
  NullLiteral()
}

void IntegerLiteral()      :
{
    Token t;
}
{/*@bgen(jjtree) IntegerLiteral */
  {
    ASTIntegerLiteral jjtn001 = new ASTIntegerLiteral(this, JJTINTEGERLITERAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    t = <DECIMAL_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
    }
/*@egen*/
    {
	jjtn001.value =
	    Numeric.downsize(new BigInteger(t.image, 10));
    }
  |
    t = <HEX_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
    }
/*@egen*/
    {
	jjtn001.value =
	    Numeric.downsize(new BigInteger(t.image.substring(2), 16));
    }
  |
    t = <OCTAL_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
    }
/*@egen*/
    {
	jjtn001.value =
	    Numeric.downsize(new BigInteger(t.image.substring(1), 8));
    }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/
}

void FloatingPointLiteral()      :
{
  Token t;
}
{/*@bgen(jjtree) FloatLiteral */
  {
    ASTFloatLiteral jjtn001 = new ASTFloatLiteral(this, JJTFLOATLITERAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
    }
/*@egen*/
    {
	jjtn001.value = Numeric.downsize(new BigDecimal(t.image));
    }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/
}

void CharacterLiteral()      :
{
  Token t;
}
{/*@bgen(jjtree) CharacterLiteral */
  {
    ASTCharacterLiteral jjtn001 = new ASTCharacterLiteral(this, JJTCHARACTERLITERAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    t = <CHARACTER_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
    }
/*@egen*/
    {
	String str =
	    processEscape(t.image.substring(1, t.image.length() - 1));
	jjtn001.value = new Character(str.charAt(0));
    }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/
}

void StringLiteral()      :
{
  Token t;
}
{/*@bgen(jjtree) StringLiteral */
  {
    ASTStringLiteral jjtn001 = new ASTStringLiteral(this, JJTSTRINGLITERAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    t = <STRING_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
    }
/*@egen*/
    {
	jjtn001.value =
	    processEscape(t.image.substring(1, t.image.length() - 1));
    }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/
}

void BooleanLiteral()      :
{}
{/*@bgen(jjtree) BooleanLiteral */
  {
    ASTBooleanLiteral jjtn001 = new ASTBooleanLiteral(this, JJTBOOLEANLITERAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    "true"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
    }
/*@egen*/
    {
	jjtn001.value = Boolean.TRUE;
    }
  |
    "false"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
    }
/*@egen*/
    {
	jjtn001.value = Boolean.FALSE;
    }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/
}

void NullLiteral():
{/*@bgen(jjtree) NullLiteral */
  ASTNullLiteral jjtn000 = new ASTNullLiteral(this, JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NullLiteral */
  try {
/*@egen*/
  "null"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Symbol():
{/*@bgen(jjtree) Symbol */
  ASTSymbol jjtn000 = new ASTSymbol(this, JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Symbol */
  try {
/*@egen*/
  t = <SYMBOL>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtreeCloseNodeScope(jjtn000);
               }
/*@egen*/ { jjtn000.symbol = Symbol.get(t.image.substring(1)); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void ClassExpression() :
{/*@bgen(jjtree) ClassExpression */
  ASTClassExpression jjtn000 = new ASTClassExpression(this, JJTCLASSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  String str;
}
{/*@bgen(jjtree) ClassExpression */
  try {
/*@egen*/
  "class" "("
  str = JavaIdentifier()
  {
    jjtn000.name = str;
  }
  (
    "." str = JavaIdentifier()
    {
	jjtn000.name += ".";
	jjtn000.name += str;
    }
  )*
  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void AllocationExpression() :
{/*@bgen(jjtree) AllocationExpression */
  ASTAllocationExpression jjtn000 = new ASTAllocationExpression(this, JJTALLOCATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AllocationExpression */
  try {
/*@egen*/
  "new" ( ClassExpression() | Variable() )
        ( Arguments() | ( LOOKAHEAD(2) "[" Expression() "]" )+ )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Variable()      :
{
  Token t;
}
{
  t = <IDENTIFIER>/*@bgen(jjtree) Variable */
                   {
                     ASTVariable jjtn001 = new ASTVariable(this, JJTVARIABLE);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtreeOpenNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtreeCloseNodeScope(jjtn001);
                   }
/*@egen*/ { jjtn001.symbol = Symbol.get(t.image); }/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtreeCloseNodeScope(jjtn001);
                     }
                   }
/*@egen*/
|
  "::" t = <IDENTIFIER>/*@bgen(jjtree) GlobalVariable */
  {
    ASTGlobalVariable jjtn002 = new ASTGlobalVariable(this, JJTGLOBALVARIABLE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
    jjtreeCloseNodeScope(jjtn002);
  }
/*@egen*/
  { jjtn002.symbol = Symbol.get(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtreeCloseNodeScope(jjtn002);
    }
  }
/*@egen*/
}

void This() :
{/*@bgen(jjtree) This */
  ASTThis jjtn000 = new ASTThis(this, JJTTHIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) This */
  try {
/*@egen*/
  "this"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Exception() :
{/*@bgen(jjtree) Exception */
  ASTException jjtn000 = new ASTException(this, JJTEXCEPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exception */
  try {
/*@egen*/
  "exception"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void IfExpression() :
{/*@bgen(jjtree) IfExpression */
  ASTIfExpression jjtn000 = new ASTIfExpression(this, JJTIFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfExpression */
  try {
/*@egen*/
  "if" Expression() ":" ExpressionList()
  ( LOOKAHEAD(1) "elsif" Expression() ":" ExpressionList() )*
  [ LOOKAHEAD(1) "else" ":" ExpressionList() ]
  "end"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void WhileExpression() :
{/*@bgen(jjtree) WhileExpression */
  ASTWhileExpression jjtn000 = new ASTWhileExpression(this, JJTWHILEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) WhileExpression */
  try {
/*@egen*/
  "while" Expression() ":" ExpressionList() "end"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void ForExpression() :
{/*@bgen(jjtree) ForExpression */
  ASTForExpression jjtn000 = new ASTForExpression(this, JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ForExpression */
  try {
/*@egen*/
  "for" t = <IDENTIFIER> "in" Expression() ":" ExpressionList() "end"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
      jjtn000.loopVariable = Symbol.get(t.image);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void TryExpression() :
{/*@bgen(jjtree) TryExpression */
  ASTTryExpression jjtn000 = new ASTTryExpression(this, JJTTRYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TryExpression */
  try {
/*@egen*/
  "try" ":" ExpressionList()
  ( "catch" Expression() ":" ExpressionList() )*
  [ "finally" ":" ExpressionList() ]
  "end"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void SynchronizedExpression() :
{/*@bgen(jjtree) SynchronizedExpression */
  ASTSynchronizedExpression jjtn000 = new ASTSynchronizedExpression(this, JJTSYNCHRONIZEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SynchronizedExpression */
  try {
/*@egen*/
  "synchronized" Expression() ":"
  ExpressionList()
  "end"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void FunctionDefinition() :
{/*@bgen(jjtree) FunctionDefinition */
  ASTFunctionDefinition jjtn000 = new ASTFunctionDefinition(this, JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) FunctionDefinition */
  try {
/*@egen*/
  t = "def"
  {
      if (inFunctionDefinition) {
	  throw new ParseException("nested function definition at line " +
				   t.beginLine + ", column " +
				   t.beginColumn + ".");
      }
  }
  t = <IDENTIFIER> { jjtn000.name = Symbol.get(t.image); }
  "(" 
    [
      (
        t = <IDENTIFIER>
	{
	    jjtn000.args.addElement(Symbol.get(t.image));
	}
	[
	  "=" Expression()
	  {
	      jjtn000.defaults.addElement(
		 new Integer(jjtn000.args.size() - 1));
	  }
	]
      )
      (
        LOOKAHEAD(2)
        "," t = <IDENTIFIER>
	{
	    jjtn000.args.addElement(Symbol.get(t.image));
	}
	[
	  "=" Expression()
	  {
	      jjtn000.defaults.addElement(
		 new Integer(jjtn000.args.size() - 1));
	  }
	]
      )*
      [
        "," "*" t = <IDENTIFIER>
	{
	    jjtn000.rest = Symbol.get(t.image);
	}
      ]
    |
      "*" t = <IDENTIFIER>
      {
	  jjtn000.rest = Symbol.get(t.image);
      }
    ]
  ")" ":"
  {
      inFunctionDefinition = true;
  }
  ExpressionList()
  "end"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
      inFunctionDefinition = false;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Closure() :
{/*@bgen(jjtree) Closure */
  ASTClosure jjtn000 = new ASTClosure(this, JJTCLOSURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Closure */
  try {
/*@egen*/
  "["
    [ 
      LOOKAHEAD(2)
      [ 
        t = <IDENTIFIER>
	{
	    jjtn000.args.addElement(Symbol.get(t.image));
	}
	(
	  "," t = <IDENTIFIER>
	  {
	      jjtn000.args.addElement(Symbol.get(t.image));
	  }
	)*
      ] ":" ]
    ExpressionList()
  "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void ModuleDefinition() :
{/*@bgen(jjtree) ModuleDefinition */
  ASTModuleDefinition jjtn000 = new ASTModuleDefinition(this, JJTMODULEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
  Vector v = new Vector();
}
{/*@bgen(jjtree) ModuleDefinition */
  try {
/*@egen*/
  t = "module"
  {
      if (inFunctionDefinition) {
	  throw new ParseException("module definition in function " +
				   "at line " + t.beginLine +
				   ", column " + t.beginColumn + ".");
      }
  }
  t = <IDENTIFIER> { jjtn000.name = Symbol.get(t.image); } ":"
  ExpressionList()
  "end"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void ArrayExpression() :
{/*@bgen(jjtree) ArrayExpression */
  ASTArrayExpression jjtn000 = new ASTArrayExpression(this, JJTARRAYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayExpression */
  try {
/*@egen*/
  "#" "(" [ Expression() ( "," Expression() )* ] ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void VectorExpression() :
{/*@bgen(jjtree) VectorExpression */
  ASTVectorExpression jjtn000 = new ASTVectorExpression(this, JJTVECTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VectorExpression */
  try {
/*@egen*/
  "#" "[" [ Expression() ( "," Expression() )* ] "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void HashExpression() :
{/*@bgen(jjtree) HashExpression */
  ASTHashExpression jjtn000 = new ASTHashExpression(this, JJTHASHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HashExpression */
  try {
/*@egen*/
  "{" [ Expression() "=>" Expression()
  ( "," Expression() "=>" Expression() )* ] "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void PrimarySuffix()      :
{
  String str;
}
{
  "[" Expression()/*@bgen(jjtree) #ArrayAccess( 2) */
                   {
                     ASTArrayAccess jjtn001 = new ASTArrayAccess(this, JJTARRAYACCESS);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtreeOpenNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtreeCloseNodeScope(jjtn001);
                     }
                   }
/*@egen*/
|
  "." str = JavaIdentifier()/*@bgen(jjtree) #MemberAccess( 1) */
  {
    ASTMemberAccess jjtn002 = new ASTMemberAccess(this, JJTMEMBERACCESS);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002,  1);
    jjtc002 = false;
    jjtreeCloseNodeScope(jjtn002);
  }
/*@egen*/
  {
      jjtn002.symbol = Symbol.get(str);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  1);
      jjtreeCloseNodeScope(jjtn002);
    }
  }
/*@egen*/
|
  "::" str = JavaIdentifier()/*@bgen(jjtree) #StaticMemberAccess( 1) */
  {
    ASTStaticMemberAccess jjtn003 = new ASTStaticMemberAccess(this, JJTSTATICMEMBERACCESS);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn003,  1);
    jjtc003 = false;
    jjtreeCloseNodeScope(jjtn003);
  }
/*@egen*/
  {
      jjtn003.symbol = Symbol.get(str);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003,  1);
      jjtreeCloseNodeScope(jjtn003);
    }
  }
/*@egen*/
|/*@bgen(jjtree) #FunctionCall( 2) */
  {
    ASTFunctionCall jjtn004 = new ASTFunctionCall(this, JJTFUNCTIONCALL);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
  }
  try {
/*@egen*/
  Arguments()/*@bgen(jjtree)*/
  } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof ParseException) {
      throw (ParseException)jjte004;
    }
    if (jjte004 instanceof RuntimeException) {
      throw (RuntimeException)jjte004;
    }
    throw (Error)jjte004;
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004,  2);
      jjtreeCloseNodeScope(jjtn004);
    }
  }
/*@egen*/
}

void Arguments()      :
{}
{
  "(" ArgumentList() ")"
}

void ArgumentList() :
{/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(this, JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
  try {
/*@egen*/
  [ Expression() ( "," Expression() )* ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}
