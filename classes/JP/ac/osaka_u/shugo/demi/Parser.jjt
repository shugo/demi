/* Parser.jjt */

options {
    STATIC = false;
    JAVA_UNICODE_ESCAPE = true;
    MULTI = true;
    NODE_SCOPE_HOOK = true;
    NODE_USES_PARSER = true;
}

PARSER_BEGIN(Parser)

package JP.ac.osaka_u.shugo.demi;

import java.util.*;
import java.math.*;

public class Parser {

    String fileName = "-";
    boolean inFunctionDefinition = false;

    void jjtreeOpenNodeScope(Node n) {
	Token t = getToken(1);
	((SimpleNode) n).line = t.beginLine;
    }

    void jjtreeCloseNodeScope(Node n) {
    }

    private static String processEscape(String str) {
	StringBuffer buff = new StringBuffer();
	for (int i = 0; i < str.length(); i++) {
	    char c = str.charAt(i);
	    if (c == '\\') {
		i++;
		c = str.charAt(i);
		switch (c) {
		case 'n':
		    buff.append('\n');
		    break;
		case 't':
		    buff.append('\t');
		    break;
		case 'b':
		    buff.append('\b');
		    break;
		case 'r':
		    buff.append('\r');
		    break;
		case 'f':
		    buff.append('\f');
		    break;
		case '\\':
		    buff.append('\\');
		    break;
		case '\'':
		    buff.append('\'');
		    break;
		case '"':
		    buff.append('"');
		    break;
		default:
		    if (c >= '0' && c <= '7') {
			StringBuffer tmp = new StringBuffer();
			tmp.append(c);
			for (int j = 0; j < 2; j++) {
			    if (i < str.length() - 1) {
				char ch = str.charAt(i + 1);
				if (ch >= '0' && ch <= '7') {
				    tmp.append(ch);
				    i++;
				} else {
				    break;
				}
			    } else {
				break;
			    }
			}
			char ch =
			    (char) Integer.parseInt(new String(tmp), 8);
			buff.append(ch);
		    } else {
			buff.append(c);
		    }
		}
	    } else {
		buff.append(c);
	    }
	}
	return new String(buff);
    }
}

PARSER_END(Parser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS */

TOKEN :
{
  < BREAK: "break" >
| < CATCH: "catch" >
| < CLASS: "class" >
| < CONTINUE: "continue" >
| < DEF: "def" >
| < ELSE: "else" >
| < ELSIF: "elsif" >
| < END: "end" >
| < EXCEPTION: "exception" >
| < FALSE: "false" >
| < FINALLY: "finally" >
| < FOR: "for" >
| < IF: "if" >
| < IN: "in" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < MODULE: "module" >
| < NEW: "new" >
| < NULL: "null" >
| < RETURN: "return" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < TRUE: "true" >
| < TRY: "try" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < DECIMAL_LITERAL: "0" | ["1"-"9"] (["0"-"9"])* >
|
  < HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < OCTAL_LITERAL: "0" (["0"-"7"])+ >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN :
{
  < SYMBOL: "#" <IDENTIFIER> >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < COLON2: "::" >
| < EQ: "==" >
| < IEQ: "===" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < DOT2: ".." >
| < SHARP: "#" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < INCR: "++" >
| < DECR: "--" >
}

String JavaIdentifier() #void:
{
  Token t;
}
{
  ( t = <IDENTIFIER> | t = "def" | t = "elsif" | t = "end"
  | t = "exception" | t = "in" | t = "module" )
  {
    return t.image;
  }
}

void CompilationUnit() #void:
{}
{
    ExpressionList() <EOF>
}

void ExpressionList() :
{}
{
  [ Expression() ] ( ";" [ Expression() ] )*
}

void Expression() #void:
{}
{
  Import()
|
  Break()
|
  Continue()
|
  Return()
|
  Throw()
|
  ConditionalOrExpression() [ Assignment() ]
}

void Import() :
{
  Token t;
}
{
  "import"
  t = <IDENTIFIER> { jjtThis.packageName = t.image; }
  (
    "." t = <IDENTIFIER>
    {
	jjtThis.packageName += ".";
	jjtThis.packageName += t.image;
    }
  )*
}

void Break() :
{}
{
  "break"
}

void Continue() :
{}
{
  "continue"
}

void Return() :
{
  Token t;
}
{
  t = "return"
  {
      if (!inFunctionDefinition) {
	  throw new ParseException("return appeared outside of function " +
				   "at line " + t.beginLine +
				   ", column " + t.beginColumn + ".");
      }
  }
  [ Expression() ]
}

void Throw() :
{}
{
  "throw" Expression()
}

void Assignment() #void:
{}
{
  "=" Expression() #Assignment(2)
|
  "+=" Expression() #AddAssign(2)
|
  "-=" Expression() #SubAssign(2)
|
  "*=" Expression() #MulAssign(2)
|
  "/=" Expression() #DivAssign(2)
|
  "%=" Expression() #ModAssign(2)
|
  "&=" Expression() #AndAssign(2)
|
  "|=" Expression() #OrAssign(2)
|
  "^=" Expression() #XorAssign(2)
|
  "<<=" Expression() #LShiftAssign(2)
|
  ">>=" Expression() #RShiftAssign(2)
|
  ">>>=" Expression() #RUShiftAssign(2)
}

void ConditionalOrExpression() #void:
{}
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() #OrNode(2) )*
}

void ConditionalAndExpression() #void:
{}
{
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() #AndNode(2) )*
}

void InclusiveOrExpression() #void:
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() #BitwiseOrNode(2) )*
}

void ExclusiveOrExpression() #void:
{}
{
  AndExpression() ( "^" AndExpression() #BitwiseXorNode(2) )*
}

void AndExpression() #void:
{}
{
  EqualityExpression() ( "&" EqualityExpression() #BitwiseAndNode(2) )*
}

void EqualityExpression() #void:
{}
{
  InstanceOfExpression()
  (
    "==" InstanceOfExpression() #EqualNode(2)
   |
    "!=" InstanceOfExpression() #NotEqualNode(2)
   |
    "===" InstanceOfExpression() #IdentityEqualNode(2)
  )*
}

void InstanceOfExpression() #void:
{}
{
  InExpression()
  [ "instanceof" PrimaryExpression() #InstanceOfNode(2) ]
}

void InExpression() #void:
{}
{
  RangeExpression() ( "in" RangeExpression() #InNode(2) )*
}

void RangeExpression() #void:
{}
{
  RelationalExpression() ( ".." RelationalExpression() #RangeNode(2) )*
}

void RelationalExpression() #void:
{}
{
  ShiftExpression()
  (
    "<" ShiftExpression() #LessThanNode(2)
   |
    ">" ShiftExpression() #GreaterThanNode(2)
   | 
    "<=" ShiftExpression() #LessEqualNode(2)
   | 
    ">=" ShiftExpression() #GreaterEqualNode(2)
  )*
}

void ShiftExpression() #void:
{}
{
  AdditiveExpression()
  (
    "<<" AdditiveExpression() #LShiftNode(2)
   |
    ">>" AdditiveExpression() #RSignedShiftNode(2)
   |
    ">>>" AdditiveExpression() #RUnsignedShiftNode(2)
  )*
}

void AdditiveExpression() #void:
{}
{
  MultiplicativeExpression()
  (
    "+" MultiplicativeExpression() #AddNode(2)
   |
    "-" MultiplicativeExpression() #SubNode(2)
  )*
}

void MultiplicativeExpression() #void:
{}
{
  UnaryExpression()
  (
    "*" UnaryExpression() #MulNode(2)
   |
    "/" UnaryExpression() #DivNode(2)
   |
    "%" UnaryExpression() #ModNode(2)
  )*
}

void UnaryExpression() #void:
{}
{
  "+" UnaryExpression() #UnaryPlusNode(1)
|
  "-" UnaryExpression() #UnaryMinusNode(1)
|
  "++" UnaryExpression() #PreIncNode(1)
|
  "--" UnaryExpression() #PreDecNode(1)
|
  UnaryExpressionNotPlusMinus()
}

void UnaryExpressionNotPlusMinus() #void:
{}
{
  "~" UnaryExpression() #BitwiseComplNode(1)
|
  "!" UnaryExpression() #NotNode(1)
|
  PrimaryExpression()
  [
    "++" #PostIncNode(1)
  |
    "--" #PostDecNode(1)
  ]
}

void PrimaryExpression() #void:
{
  Token t;
}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() #void:
{}
{
  "(" Expression() ")"
|
  Literal()
|
  Symbol()
|
  ClassExpression()
|
  AllocationExpression()
|
  Variable()
|
  This()
|
  Exception()
|
  IfExpression()
|
  WhileExpression()
|
  ForExpression()
|
  TryExpression()
|
  SynchronizedExpression()
|
  FunctionDefinition()
|
  Closure()
|
  ModuleDefinition()
|
  LOOKAHEAD(2)
  ArrayExpression()
|
  VectorExpression()
|
  HashExpression()
}

void Literal() #void:
{}
{
  IntegerLiteral()
|
  FloatingPointLiteral()
|
  CharacterLiteral()
|
  StringLiteral()
|
  BooleanLiteral()
|
  NullLiteral()
}

void IntegerLiteral() #void:
{
    Token t;
}
{
  (
    t = <DECIMAL_LITERAL>
    {
	jjtThis.value =
	    Numeric.downsize(new BigInteger(t.image, 10));
    }
  |
    t = <HEX_LITERAL>
    {
	jjtThis.value =
	    Numeric.downsize(new BigInteger(t.image.substring(2), 16));
    }
  |
    t = <OCTAL_LITERAL>
    {
	jjtThis.value =
	    Numeric.downsize(new BigInteger(t.image.substring(1), 8));
    }
  ) #IntegerLiteral
}

void FloatingPointLiteral() #void:
{
  Token t;
}
{
  (
    t = <FLOATING_POINT_LITERAL>
    {
	jjtThis.value = Numeric.downsize(new BigDecimal(t.image));
    }
  ) #FloatLiteral
}

void CharacterLiteral() #void:
{
  Token t;
}
{
  (
    t = <CHARACTER_LITERAL>
    {
	String str =
	    processEscape(t.image.substring(1, t.image.length() - 1));
	jjtThis.value = new Character(str.charAt(0));
    }
  ) #CharacterLiteral
}

void StringLiteral() #void:
{
  Token t;
}
{
  (
    t = <STRING_LITERAL>
    {
	jjtThis.value =
	    processEscape(t.image.substring(1, t.image.length() - 1));
    }
  ) #StringLiteral
}

void BooleanLiteral() #void:
{}
{
  (
    "true"
    {
	jjtThis.value = Boolean.TRUE;
    }
  |
    "false"
    {
	jjtThis.value = Boolean.FALSE;
    }
  ) #BooleanLiteral
}

void NullLiteral():
{}
{
  "null"
}

void Symbol():
{
  Token t;
}
{
  t = <SYMBOL> { jjtThis.symbol = Symbol.get(t.image.substring(1)); }
}

void ClassExpression() :
{
  String str;
}
{
  "class" "("
  str = JavaIdentifier()
  {
    jjtThis.name = str;
  }
  (
    "." str = JavaIdentifier()
    {
	jjtThis.name += ".";
	jjtThis.name += str;
    }
  )*
  ")"
}

void AllocationExpression() :
{}
{
  "new" ( ClassExpression() | Variable() )
        ( Arguments() | ( LOOKAHEAD(2) "[" Expression() "]" )+ )
}

void Variable() #void:
{
  Token t;
}
{
  t = <IDENTIFIER> { jjtThis.symbol = Symbol.get(t.image); } #Variable
|
  "::" t = <IDENTIFIER>
  { jjtThis.symbol = Symbol.get(t.image); } #GlobalVariable
}

void This() :
{}
{
  "this"
}

void Exception() :
{}
{
  "exception"
}

void IfExpression() :
{}
{
  "if" Expression() ":" ExpressionList()
  ( LOOKAHEAD(1) "elsif" Expression() ":" ExpressionList() )*
  [ LOOKAHEAD(1) "else" ":" ExpressionList() ]
  "end"
}

void WhileExpression() :
{
  Token t;
}
{
  "while" Expression() ":" ExpressionList() "end"
}

void ForExpression() :
{
  Token t;
}
{
  "for" t = <IDENTIFIER> "in" Expression() ":" ExpressionList() "end"
  {
      jjtThis.loopVariable = Symbol.get(t.image);
  }
}

void TryExpression() :
{}
{
  "try" ":" ExpressionList()
  ( "catch" Expression() ":" ExpressionList() )*
  [ "finally" ":" ExpressionList() ]
  "end"
}

void SynchronizedExpression() :
{}
{
  "synchronized" Expression() ":"
  ExpressionList()
  "end"
}

void FunctionDefinition() :
{
  Token t;
}
{
  t = "def"
  {
      if (inFunctionDefinition) {
	  throw new ParseException("nested function definition at line " +
				   t.beginLine + ", column " +
				   t.beginColumn + ".");
      }
  }
  t = <IDENTIFIER> { jjtThis.name = Symbol.get(t.image); }
  "(" 
    [
      (
        t = <IDENTIFIER>
	{
	    jjtThis.args.addElement(Symbol.get(t.image));
	}
	[
	  "=" Expression()
	  {
	      jjtThis.defaults.addElement(
		 new Integer(jjtThis.args.size() - 1));
	  }
	]
      )
      (
        LOOKAHEAD(2)
        "," t = <IDENTIFIER>
	{
	    jjtThis.args.addElement(Symbol.get(t.image));
	}
	[
	  "=" Expression()
	  {
	      jjtThis.defaults.addElement(
		 new Integer(jjtThis.args.size() - 1));
	  }
	]
      )*
      [
        "," "*" t = <IDENTIFIER>
	{
	    jjtThis.rest = Symbol.get(t.image);
	}
      ]
    |
      "*" t = <IDENTIFIER>
      {
	  jjtThis.rest = Symbol.get(t.image);
      }
    ]
  ")" ":"
  {
      inFunctionDefinition = true;
  }
  ExpressionList()
  "end"
  {
      inFunctionDefinition = false;
  }
}

void Closure() :
{
  Token t;
}
{
  "["
    [ 
      LOOKAHEAD(2)
      [ 
        t = <IDENTIFIER>
	{
	    jjtThis.args.addElement(Symbol.get(t.image));
	}
	(
	  "," t = <IDENTIFIER>
	  {
	      jjtThis.args.addElement(Symbol.get(t.image));
	  }
	)*
      ] ":" ]
    ExpressionList()
  "]"
}

void ModuleDefinition() :
{
  Token t;
  Vector v = new Vector();
}
{
  t = "module"
  {
      if (inFunctionDefinition) {
	  throw new ParseException("module definition in function " +
				   "at line " + t.beginLine +
				   ", column " + t.beginColumn + ".");
      }
  }
  t = <IDENTIFIER> { jjtThis.name = Symbol.get(t.image); } ":"
  ExpressionList()
  "end"
}

void ArrayExpression() :
{}
{
  "#" "(" [ Expression() ( "," Expression() )* ] ")"
}

void VectorExpression() :
{}
{
  "#" "[" [ Expression() ( "," Expression() )* ] "]"
}

void HashExpression() :
{}
{
  "{" [ Expression() "=>" Expression()
  ( "," Expression() "=>" Expression() )* ] "}"
}

void PrimarySuffix() #void:
{
  String str;
}
{
  "[" Expression() "]" #ArrayAccess(2)
|
  "." str = JavaIdentifier()
  {
      jjtThis.symbol = Symbol.get(str);
  } #MemberAccess(1)
|
  "::" str = JavaIdentifier()
  {
      jjtThis.symbol = Symbol.get(str);
  } #StaticMemberAccess(1)
|
  Arguments() #FunctionCall(2)
}

void Arguments() #void:
{}
{
  "(" ArgumentList() ")"
}

void ArgumentList() :
{}
{
  [ Expression() ( "," Expression() )* ]
}
