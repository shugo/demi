/* Generated By:JJTree: Do not edit this line. ParserTreeConstants.java */

package JP.ac.osaka_u.shugo.demi;

public interface ParserTreeConstants
{
  public int JJTVOID = 0;
  public int JJTEXPRESSIONLIST = 1;
  public int JJTIMPORT = 2;
  public int JJTBREAK = 3;
  public int JJTCONTINUE = 4;
  public int JJTRETURN = 5;
  public int JJTTHROW = 6;
  public int JJTASSIGNMENT = 7;
  public int JJTADDASSIGN = 8;
  public int JJTSUBASSIGN = 9;
  public int JJTMULASSIGN = 10;
  public int JJTDIVASSIGN = 11;
  public int JJTMODASSIGN = 12;
  public int JJTANDASSIGN = 13;
  public int JJTORASSIGN = 14;
  public int JJTXORASSIGN = 15;
  public int JJTLSHIFTASSIGN = 16;
  public int JJTRSHIFTASSIGN = 17;
  public int JJTRUSHIFTASSIGN = 18;
  public int JJTORNODE = 19;
  public int JJTANDNODE = 20;
  public int JJTBITWISEORNODE = 21;
  public int JJTBITWISEXORNODE = 22;
  public int JJTBITWISEANDNODE = 23;
  public int JJTEQUALNODE = 24;
  public int JJTNOTEQUALNODE = 25;
  public int JJTIDENTITYEQUALNODE = 26;
  public int JJTINSTANCEOFNODE = 27;
  public int JJTINNODE = 28;
  public int JJTRANGENODE = 29;
  public int JJTLESSTHANNODE = 30;
  public int JJTGREATERTHANNODE = 31;
  public int JJTLESSEQUALNODE = 32;
  public int JJTGREATEREQUALNODE = 33;
  public int JJTLSHIFTNODE = 34;
  public int JJTRSIGNEDSHIFTNODE = 35;
  public int JJTRUNSIGNEDSHIFTNODE = 36;
  public int JJTADDNODE = 37;
  public int JJTSUBNODE = 38;
  public int JJTMULNODE = 39;
  public int JJTDIVNODE = 40;
  public int JJTMODNODE = 41;
  public int JJTUNARYPLUSNODE = 42;
  public int JJTUNARYMINUSNODE = 43;
  public int JJTPREINCNODE = 44;
  public int JJTPREDECNODE = 45;
  public int JJTBITWISECOMPLNODE = 46;
  public int JJTNOTNODE = 47;
  public int JJTPOSTINCNODE = 48;
  public int JJTPOSTDECNODE = 49;
  public int JJTINTEGERLITERAL = 50;
  public int JJTFLOATLITERAL = 51;
  public int JJTCHARACTERLITERAL = 52;
  public int JJTSTRINGLITERAL = 53;
  public int JJTBOOLEANLITERAL = 54;
  public int JJTNULLLITERAL = 55;
  public int JJTSYMBOL = 56;
  public int JJTCLASSEXPRESSION = 57;
  public int JJTALLOCATIONEXPRESSION = 58;
  public int JJTVARIABLE = 59;
  public int JJTGLOBALVARIABLE = 60;
  public int JJTTHIS = 61;
  public int JJTEXCEPTION = 62;
  public int JJTIFEXPRESSION = 63;
  public int JJTWHILEEXPRESSION = 64;
  public int JJTFOREXPRESSION = 65;
  public int JJTTRYEXPRESSION = 66;
  public int JJTSYNCHRONIZEDEXPRESSION = 67;
  public int JJTFUNCTIONDEFINITION = 68;
  public int JJTCLOSURE = 69;
  public int JJTMODULEDEFINITION = 70;
  public int JJTARRAYEXPRESSION = 71;
  public int JJTVECTOREXPRESSION = 72;
  public int JJTHASHEXPRESSION = 73;
  public int JJTARRAYACCESS = 74;
  public int JJTMEMBERACCESS = 75;
  public int JJTSTATICMEMBERACCESS = 76;
  public int JJTFUNCTIONCALL = 77;
  public int JJTARGUMENTLIST = 78;


  public String[] jjtNodeName = {
    "void",
    "ExpressionList",
    "Import",
    "Break",
    "Continue",
    "Return",
    "Throw",
    "Assignment",
    "AddAssign",
    "SubAssign",
    "MulAssign",
    "DivAssign",
    "ModAssign",
    "AndAssign",
    "OrAssign",
    "XorAssign",
    "LShiftAssign",
    "RShiftAssign",
    "RUShiftAssign",
    "OrNode",
    "AndNode",
    "BitwiseOrNode",
    "BitwiseXorNode",
    "BitwiseAndNode",
    "EqualNode",
    "NotEqualNode",
    "IdentityEqualNode",
    "InstanceOfNode",
    "InNode",
    "RangeNode",
    "LessThanNode",
    "GreaterThanNode",
    "LessEqualNode",
    "GreaterEqualNode",
    "LShiftNode",
    "RSignedShiftNode",
    "RUnsignedShiftNode",
    "AddNode",
    "SubNode",
    "MulNode",
    "DivNode",
    "ModNode",
    "UnaryPlusNode",
    "UnaryMinusNode",
    "PreIncNode",
    "PreDecNode",
    "BitwiseComplNode",
    "NotNode",
    "PostIncNode",
    "PostDecNode",
    "IntegerLiteral",
    "FloatLiteral",
    "CharacterLiteral",
    "StringLiteral",
    "BooleanLiteral",
    "NullLiteral",
    "Symbol",
    "ClassExpression",
    "AllocationExpression",
    "Variable",
    "GlobalVariable",
    "This",
    "Exception",
    "IfExpression",
    "WhileExpression",
    "ForExpression",
    "TryExpression",
    "SynchronizedExpression",
    "FunctionDefinition",
    "Closure",
    "ModuleDefinition",
    "ArrayExpression",
    "VectorExpression",
    "HashExpression",
    "ArrayAccess",
    "MemberAccess",
    "StaticMemberAccess",
    "FunctionCall",
    "ArgumentList",
  };
}
