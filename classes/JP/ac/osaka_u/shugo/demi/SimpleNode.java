/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

package JP.ac.osaka_u.shugo.demi;

import java.util.*;
import java.lang.reflect.*;

public class SimpleNode implements Node {
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Parser parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Parser p, int i) {
    this(i);
    parser = p;
  }

  public static Node jjtCreate(int id) {
    return new SimpleNode(id);
  }

  public static Node jjtCreate(Parser p, int id) {
    return new SimpleNode(p, id);
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }
  
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return ParserTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
	SimpleNode n = (SimpleNode)children[i];
	if (n != null) {
	  n.dump(prefix + " ");
	}
      }
    }
  }

    public int line;

    public String getFileName() {
	return parser.fileName;
    }

    public Object evaluate(Demi demi) throws Jump {
	try {
	    return evaluate0(demi);
	} catch (Throwable e) {
	    Stack stack = demi.getCallInfoStack();
	    if (stack != null)
		stack = (Stack) stack.clone();
	    if (e instanceof InvocationTargetException)
		e = ((InvocationTargetException) e).getTargetException();
	    if (e instanceof Jump)
		throw (Jump) e;
	    else
		throw new DemiException(this, stack, e);
	}
    }

    protected Object evaluate0(Demi demi) throws Throwable {
	throw new Error("can't evaluate " + this);
    }

    protected Object assign(Demi demi, SimpleNode lhs, Object val)
	throws Throwable {
	Scope scope = demi.getScope();
	if (lhs instanceof ASTVariable) {
	    Symbol symbol = ((ASTVariable) lhs).symbol;
	    if (lhs instanceof ASTGlobalVariable) {
		demi.setGlobalVariable(symbol, val);
	    } else {
		scope.setVariable(symbol, val);
	    }
	} else if (lhs instanceof ASTMemberAccess) {
	    Object obj;
	    Class cls;
	    boolean staticField = false;
	    if (lhs instanceof ASTStaticMemberAccess) {
		Object o = ((SimpleNode) lhs.jjtGetChild(0)).evaluate(demi);
		if (o instanceof Class) {
		    cls = (Class) o;
		    obj = null;
		    staticField = true;
		} else if (o instanceof Module) {
		    Module module = (Module) o;
		    Symbol symbol = ((ASTStaticMemberAccess) lhs).symbol;
		    module.setVariable(symbol, val);
		    return val;
		} else {
		    throw new IllegalTypeException(o, "Class or Module");
		}
	    } else {
		obj = ((SimpleNode) lhs.jjtGetChild(0)).evaluate(demi);
		cls = obj.getClass();
	    }
	    String name = ((ASTMemberAccess) lhs).getName();
	    Field field = cls.getField(name);
	    if (field == null ||
		(staticField &&
		 !Modifier.isStatic(field.getModifiers()))) {
		String msg = "no such field " + name +
		    " for " + cls.getName();
		throw new NoSuchFieldException(msg);
	    }
	    if (!Demi.canConvert(val, field.getType())) {
		throw new IllegalTypeException(val, field.getType());
	    }
	    field.set(obj, Demi.convert(val, field.getType()));
	} else if (lhs instanceof ASTArrayAccess) {
	    Object obj = ((SimpleNode) lhs.jjtGetChild(0)).evaluate(demi);
	    Object index = ((SimpleNode) lhs.jjtGetChild(1)).evaluate(demi);
	    if (obj.getClass().isArray()) {
		if (!(index instanceof Number))
		    throw new IllegalTypeException(index, "Number");
		Class componentType = obj.getClass().getComponentType();
		if (!Demi.canConvert(val, componentType))
		    throw new IllegalTypeException(val, componentType);
		int i = ((Number) index).intValue();
		Array.set(obj, i, Demi.convert(val, componentType));
	    } else {
		Class ObjectClass = Class.forName("java.lang.Object");
		Class[] paramTypes;
		Method method;
		try {
		    paramTypes = new Class[]{Integer.TYPE, Character.TYPE};
		    method =
			obj.getClass().getMethod("setCharAt", paramTypes);
		    method.invoke(obj, new Object[]{index, val});
		    return val;
		} catch (NoSuchMethodException e) {
		}
		try {
		    paramTypes = new Class[]{ObjectClass, Integer.TYPE};
		    method =
			obj.getClass().getMethod("setElementAt", paramTypes);
		    method.invoke(obj, new Object[]{val, index});
		    return val;
		} catch (NoSuchMethodException e) {
		}
		try {
		    paramTypes = new Class[]{ ObjectClass, ObjectClass };
		    method = obj.getClass().getMethod("put", paramTypes);
		    method.invoke(obj, new Object[]{index, val});
		    return val;
		} catch (NoSuchMethodException e) {
		}
		throw new NoSuchMethodException("no such method []= for " +
						(obj == null ? "null" :
						 obj.getClass().toString()));
	    }
	} else {
	    String msg = "Invalid left hand side of assignment: " + lhs;
	    throw new AssignmentException(msg);
	}
	return val;
    }
}

